Maple Serial Bootloader

This bootloader implements the first version of the protocol described
in the documentation under "maple bootloader schemes, rev6." The
purpose of this new boot loader is to eliminate the dependence on DFU,
libusb, and the need to install to separate inf files under
windows. In this first version of the serial bootloader, Maple still
resets into bootloader mode and later jumps to user mode. However,
instead of transacting new binaries over the dfu protocol, new
binaries are sent over serial over usb (CDC ACM virtual COM port)
using an stk500 style command set.

FILES -------------------------------------------------------------------------

stm32lib/*
  - all the (possibly consolidated) stm32 lib and usb example code

usb.c 
  - USB-specific hardware setup. Interrupts, clocks, etc. handling USB when 
    not "Attached". some low-level callbacks (low power mode, init, reset, 
    resume, etc).

usb_callbacks.c 
  - aka endpoints: handling data transfer when "Configured". calls out to 
    application specific callbacks (CDC ACM class device callbacks)

usb_descriptor.c 
  - aka application descriptor; big static struct and callbacks for sending
    the descriptor. 

main.c
  - main loop and calling any hardware init stuff. timing hacks for EEPROM 
    writes not to block usb interrupts. logic to handle 2 second timeout then
    jump to user code. 

hardware.c
  - init routines to setup clocks, interrupts, also destructor functions.
    does not include USB stuff. EEPROM read/write functions.

protocol.c
  - mostly the giant FSM case switch for the stk500 style protocol.


TODO --------------------------------------------------------------------------

 * use sizeof() for usb application descriptor
